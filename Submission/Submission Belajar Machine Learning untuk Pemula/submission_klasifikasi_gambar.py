# -*- coding: utf-8 -*-
"""Submission-Klasifikasi Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ClYTMDVFizTuNbqMuCqhGEdtKKwjcgmP

# Data Diri
Nama : Avriansyah Bahtiar <br>
Email : avriansyahb10@gmail.com <br>
Username : avriansyah

## Proyek Akhir : Klasifikasi Gambar
"""

# memastikan versi tensorflow yang digunakan
import tensorflow as tf
print(tf.__version__)

# load dataset
!wget --no-check-certificate \
        https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
        -O /tmp/rockpaperscissors.zip

# melakukan ekstraksi pada file zip
import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

# mendefinisikan nama direktori untuk data latih
base_dir = '/tmp/rockpaperscissors'
data_dir = os.path.join(base_dir, 'rps-cv-images')

#melihat isi direktori data latih
print(data_dir)

os.listdir('/tmp/rockpaperscissors/rps-cv-images')

# image preprocessing dengan augmentation dan sekaligus memisahkan data validation sebesar 40%
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                  rotation_range = 20,
                                  horizontal_flip = True,
                                  shear_range = 0.2,
                                  fill_mode = 'nearest',
                                  validation_split = 0.4)

validation_datagen = ImageDataGenerator(rescale = 1./255,
                                        validation_split = 0.4)

#  menyiapkan data latih dari kumpulan data gambar

training_generator = train_datagen.flow_from_directory(data_dir,
                                                       target_size = (150,150),
                                                       batch_size = 32,
                                                       class_mode = 'categorical',
                                                       subset = 'training' )

#  menyiapkan data validasi dari kumpulan data gambar
validation_generator = validation_datagen.flow_from_directory(data_dir,
                                                              target_size = (150,150),
                                                              batch_size = 32,
                                                              class_mode = 'categorical',
                                                              subset = 'validation')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

modelgambar = model.fit(
      training_generator,
      epochs=25, # tambahkan epochs jika akurasi model belum optimal
      validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
      verbose=2)

# Evaluasi model
accuracy = modelgambar.history['accuracy'][-1]
print(f"Akurasi model: {accuracy*100:.2f}%")

# Visualisasi dari model yang sudah di bangun
# plot loss train & validation
import matplotlib.pyplot as plt
plt.plot(modelgambar.history['loss'], 'r', label='Training Loss')
plt.plot(modelgambar.history['val_loss'], 'b', label='Validation Loss')
plt.title('Loss & Validation Loss')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc="upper right")
plt.show()

# plot accuracy train & validation
plt.plot(modelgambar.history['accuracy'], 'r', label='Training Accuracy')
plt.plot(modelgambar.history['val_accuracy'], 'b', label='Validation Accuracy')
plt.title('Accuracy & Validation Accuracy')
plt.ylabel('Value')
plt.xlabel('Epoch')
plt.legend(loc="lower right")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)


  print(fn)
  if classes== 0:
   print('Gambar ini termasuk "Paper / Kertas"')
  elif classes== 1:
   print('Gambar ini termasuk "Rock / Batu"')
  else:
   print('Gambar ini termasuk "Scissors / Gunting"')

# sampel prediksi batu
uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)


  print(fn)
  if classes== 0:
   print('Gambar ini termasuk "Paper / Kertas"')
  elif classes== 1:
   print('Gambar ini termasuk "Rock / Batu"')
  else:
   print('Gambar ini termasuk "Scissors / Gunting"')

# Sampel untuk gambar gunting
uploaded = files.upload()

for fn in uploaded.keys():

  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))

  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])

  classes = model.predict(images, batch_size=10)
  classes =  np.argmax(classes)


  print(fn)
  if classes== 0:
   print('Gambar ini termasuk "Paper / Kertas"')
  elif classes== 1:
   print('Gambar ini termasuk "Rock / Batu"')
  else:
   print('Gambar ini termasuk "Scissors / Gunting"')